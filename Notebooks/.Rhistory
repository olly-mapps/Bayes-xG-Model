pitch_x <- 105
pitch_y <- 68
#We now convert coordinates to meters
x_meter <- coords$x_pos * pitch_x/100
y_meter <- coords$y_pos * pitch_y/100
# Calculate distances
dist <- sqrt((105 - x_meter)^2 + ((32.5) - y_meter)^2)
#Calculate angles
angles <- atan( (7.32 * (105 - x_meter) ) / ( (105 - x_meter)^2 + (32.5 - y_meter)^2 - (7.32/2)^2 )) * 180/pi
#Concatenate data-frames
shots <- data.frame(shots_cat, dist, angles)
#Retrieves unique player ids
player_list <- unique(shots$playerId)
#Filters by player ids between both data frames
shooters <- dplyr::filter(players, wyId %in% player_list)
#Selects necessary columns
shooters <- dplyr::select(shooters, c('shortName', 'wyId', 'foot'))
#Renames columns
colnames(shooters)[colnames(shooters) == "wyId"] <- "playerId"
colnames(shooters)[colnames(shooters) == "foot"] <- "preferred_foot"
#Concatenate data-frames
shots <- merge(shots, shooters, by = "playerId")
#Adds preferred foot binary column
shots <- shots %>%
mutate(preferred_foot_b = ifelse(shots$preferred_foot == shots$body_part, 1, 0))
#Removes desired column
shots <- shots %>% dplyr::select(-c("preferred_foot"))
#Convert necessary variables to factor
shots$is_goal <- shots$is_goal %>% as.factor()
shots$body_part <- shots$body_part %>% as.factor()
shots$is_CA <- shots$is_CA %>% as.factor()
shots$preferred_foot_b <- shots$preferred_foot_b %>% as.factor()
shots$shortName <- shots$shortName %>% as.factor()
summary(shots)
shots[90:100,]
shots$shortName <- stringi::stri_unescape_unicode(shots$shortName)
hist(shots$angles)
shots <- shots %>% dplyr::filter(shots$angles > 0)
hist(shots$angles)
length(table(shots$playerId))
top_players <- sort(table(shots$playerId), decreasing = T)[1:50]
top_shots <- dplyr::filter(shots, playerId %in% row.names(top_players))
top_shots$bayes_id <- as.numeric(as.factor(top_shots$shortName))
summary(top_shots)
#Defines and distance boxplot
dist_boxplot <- ggplot(top_shots, aes(x=is_goal, y=dist, fill = is_goal)) +
geom_boxplot() +
labs(title="Distributions Of Distances Grouped By Shot Outcome",
x="Shot Outcome",
y="Distance To Goal (m)") +
coord_flip()
dist_boxplot <- dist_boxplot + guides(fill=guide_legend(title="Goal (1) or Not (0)"))
#Defines angles boxplot
angles_boxplot <- ggplot(top_shots, aes(x=is_goal, y=angles, fill = is_goal)) +
geom_boxplot() +
labs(title="Distributions Of Angles Grouped By Shot Outcome",
x="Shot Outcome",
y="Angle To Goal (Degrees)") +
coord_flip()
angles_boxplot <- angles_boxplot + guides(fill=guide_legend(title="Goal (1) or Not (0)"))
#Plots distance boxplot
dist_boxplot
#Plots angles boxplot
angles_boxplot
#Create data-frame from top_players table defined earlier
top_players_df <- data.frame(top_players)
#Rename columns
colnames(top_players_df)[colnames(top_players_df) == "Var1"] <- "playerId"
colnames(top_players_df)[colnames(top_players_df) == "Freq"] <- "shotVolume"
#We add a column containing player name
top_players_df <- merge(top_players_df, distinct(top_shots[, c("playerId", "shortName")]), by = "playerId")
#We create a dataframe where the is_goal variable is numeric
numeric_goals <- top_shots[, c("shortName", "is_goal")]
numeric_goals$is_goal <- as.numeric(as.character(numeric_goals$is_goal))
#We sum up goals scored by player
summed_goals <- numeric_goals %>%
group_by(shortName) %>%
summarise(goals = sum(is_goal))
#Merge to final data-frame
shots_goals <- merge(top_players_df, summed_goals, by = "shortName")
#Sort in descending order by shot volume
shots_goals <- arrange(shots_goals, desc(shotVolume))
shots_goals$shortName <- shots_goals$shortName %>% as.factor()
#Converts the data into a readable format for ggplot
shots_goals_long <- gather(shots_goals, key = var, value = value, shotVolume, goals)
#Creates the plot structure
shots_goals_plot <- ggplot(shots_goals_long, aes(x=reorder(shortName, -value), y = value, fill = var)) +
geom_col(position = "identity", width = 0.9) +
labs(title="Shots And Goals By Player",
x="Players",
y="Volume") +
scale_x_discrete(guide = guide_axis(angle = 60))
#Adds a legend
shots_goals_plot <- shots_goals_plot + guides(fill=guide_legend(title="Key"))
#Plot
shots_goals_plot
# Split into test and train subsets
train.size <- 0.8 * nrow(top_shots)
train <- sample(1:nrow(top_shots), train.size)
test <- -train
shots.train <- top_shots[train, ]
shots.test <- top_shots[test, ]
is_goal.test <-  top_shots$is_goal[test]
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
bhmod2_X
bhmod2_X %>% dplyr::select(-(Intercept))
bhmod2_X %>% subset(-(Intercept))
bhmod2_X %>% subset(-("Intercept"))
bhmod2_X %>% subset(-("(Intercept)"))
bhmod2_X %>% subset(-((Intercept))
bhmod2_X %>% subset(-((Intercept)))
bhmod2_X %>% subset(-bhmod2_X[1])
bhmod2_X[1]
bhmod2_X[,1]
bhmod2_X[,-1]
bhmod2_X <- bhmod2_X[,-1]
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
#Delete intercept for this is accounted for in model file
bhmod2_X <- bhmod2_X[,-1]
bhmod2_X_new <- bhmod2_X[,-1]
#Defines list for stan
bhmod2_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
p = 4,
X = bhmod2_X,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = bhmod2_X_new,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
dist_beta_mu_mu = 19,
dist_beta_mu_sigma = 10,
dist_beta_sigma_rate = 0.5,
angle_beta_mu_mu = 30,
angle_beta_mu_sigma = 10,
angle_beta_sigma_rate = 0.5
)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
#Defines list for stan
bhmod2_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
p = 5,
X = bhmod2_X,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = bhmod2_X_new,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
dist_beta_mu_mu = 19,
dist_beta_mu_sigma = 10,
dist_beta_sigma_rate = 0.5,
angle_beta_mu_mu = 30,
angle_beta_mu_sigma = 10,
angle_beta_sigma_rate = 0.5
)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
#Defines list for stan
bhmod2_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
pred = 5,
X = bhmod2_X,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = bhmod2_X_new,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
dist_beta_mu_mu = 19,
dist_beta_mu_sigma = 10,
dist_beta_sigma_rate = 0.5,
angle_beta_mu_mu = 30,
angle_beta_mu_sigma = 10,
angle_beta_sigma_rate = 0.5
)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
bhmod_X_new
bhmod2_X_new
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
bhmod2_X_new
library(tidyverse)
library(MASS)
library(rstanarm)
library(data.table)
library(ggsoccer)
library(jsonlite)
library(gridExtra)
library(stringi)
library(rstan)
library(bayesplot)
library(rstanarm)
library(caret)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#Define Data Directory
dir_path <- "../Data/events"
#Get a list of files in the directory
file_list <- list.files(dir_path)
#Create an empty data frame to store the file contents
actions <- data.frame()
#Loop through the files and add their contents to the data frame
for (i in 1:length(file_list)) {
#Read the file into a data frame
file_data <- fread(file.path(dir_path, file_list[i]))
#Add the file data to the main data frame
actions <- rbind(actions, file_data)
}
#View the events data frame
actions
#Read in data
players <- fromJSON("../Data/players/players.json")
#View player data
players
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(subEventName == "Shot")
shots_df <- shots_df %>%
#If the shot is successful
mutate('is_goal' = ifelse(grepl(" 101}", shots_df$tags),1,0),
#If the shot is at the end of a counter-attack
'is_CA' = ifelse(grepl(" 1901}", shots_df$tags),1,0),
#If the shot is with the foot or another part of the body
'body_part' = ifelse(grepl(" 401}", shots_df$tags),"left",
ifelse(grepl(" 402}", shots_df$tags), "right",
ifelse(grepl(" 403}", shots_df$tags), "body", "NA"))),
#If the shot is blocked
'is_blocked' = ifelse(grepl(" 2101}", shots_df$tags), 1,0))
#Filter out only unblocked shots
shots_df <- shots_df %>% dplyr::filter(is_blocked == 0)
#Keep necessary categorical data
shots_cat <- dplyr::select(shots_df, c('playerId', 'is_goal', 'is_CA', 'body_part'))
summary(shots_cat)
#Extract all numeric entries from the positions column
pos <- str_extract_all(gsub('"', "", shots_df$positions), "\\d+")
#Define vectors to store coordinates
x_pos <- c()
y_pos <- c()
#Loops that extract the coordinates
for (i in 1:length(pos)){
x_pos <- append(x_pos, pos[[i]][2])
}
for (i in 1:length(pos)){
y_pos <- append(y_pos, pos[[i]][1])
}
#Convert coordinates to numeric data
x_pos <- x_pos %>% as.numeric()
y_pos <- y_pos %>% as.numeric()
# Create coordinate dataframe
coords <- data.frame(x_pos, y_pos)
#Define length and width of pitch
pitch_x <- 105
pitch_y <- 68
#We now convert coordinates to meters
x_meter <- coords$x_pos * pitch_x/100
y_meter <- coords$y_pos * pitch_y/100
# Calculate distances
dist <- sqrt((105 - x_meter)^2 + ((32.5) - y_meter)^2)
#Calculate angles
angles <- atan( (7.32 * (105 - x_meter) ) / ( (105 - x_meter)^2 + (32.5 - y_meter)^2 - (7.32/2)^2 )) * 180/pi
#Concatenate data-frames
shots <- data.frame(shots_cat, dist, angles)
#Retrieves unique player ids
player_list <- unique(shots$playerId)
#Filters by player ids between both data frames
shooters <- dplyr::filter(players, wyId %in% player_list)
#Selects necessary columns
shooters <- dplyr::select(shooters, c('shortName', 'wyId', 'foot'))
#Renames columns
colnames(shooters)[colnames(shooters) == "wyId"] <- "playerId"
colnames(shooters)[colnames(shooters) == "foot"] <- "preferred_foot"
#Concatenate data-frames
shots <- merge(shots, shooters, by = "playerId")
#Adds preferred foot binary column
shots <- shots %>%
mutate(preferred_foot_b = ifelse(shots$preferred_foot == shots$body_part, 1, 0))
#Removes desired column
shots <- shots %>% dplyr::select(-c("preferred_foot"))
#Convert necessary variables to factor
shots$is_goal <- shots$is_goal %>% as.factor()
shots$body_part <- shots$body_part %>% as.factor()
shots$is_CA <- shots$is_CA %>% as.factor()
shots$preferred_foot_b <- shots$preferred_foot_b %>% as.factor()
shots$shortName <- shots$shortName %>% as.factor()
summary(shots)
shots[90:100,]
shots$shortName <- stringi::stri_unescape_unicode(shots$shortName)
hist(shots$angles)
shots <- shots %>% dplyr::filter(shots$angles > 0)
hist(shots$angles)
length(table(shots$playerId))
top_players <- sort(table(shots$playerId), decreasing = T)[1:50]
top_shots <- dplyr::filter(shots, playerId %in% row.names(top_players))
top_shots$bayes_id <- as.numeric(as.factor(top_shots$shortName))
summary(top_shots)
#Defines and distance boxplot
dist_boxplot <- ggplot(top_shots, aes(x=is_goal, y=dist, fill = is_goal)) +
geom_boxplot() +
labs(title="Distributions Of Distances Grouped By Shot Outcome",
x="Shot Outcome",
y="Distance To Goal (m)") +
coord_flip()
dist_boxplot <- dist_boxplot + guides(fill=guide_legend(title="Goal (1) or Not (0)"))
#Defines angles boxplot
angles_boxplot <- ggplot(top_shots, aes(x=is_goal, y=angles, fill = is_goal)) +
geom_boxplot() +
labs(title="Distributions Of Angles Grouped By Shot Outcome",
x="Shot Outcome",
y="Angle To Goal (Degrees)") +
coord_flip()
angles_boxplot <- angles_boxplot + guides(fill=guide_legend(title="Goal (1) or Not (0)"))
#Plots distance boxplot
dist_boxplot
#Plots angles boxplot
angles_boxplot
#Create data-frame from top_players table defined earlier
top_players_df <- data.frame(top_players)
#Rename columns
colnames(top_players_df)[colnames(top_players_df) == "Var1"] <- "playerId"
colnames(top_players_df)[colnames(top_players_df) == "Freq"] <- "shotVolume"
#We add a column containing player name
top_players_df <- merge(top_players_df, distinct(top_shots[, c("playerId", "shortName")]), by = "playerId")
#We create a dataframe where the is_goal variable is numeric
numeric_goals <- top_shots[, c("shortName", "is_goal")]
numeric_goals$is_goal <- as.numeric(as.character(numeric_goals$is_goal))
#We sum up goals scored by player
summed_goals <- numeric_goals %>%
group_by(shortName) %>%
summarise(goals = sum(is_goal))
#Merge to final data-frame
shots_goals <- merge(top_players_df, summed_goals, by = "shortName")
#Sort in descending order by shot volume
shots_goals <- arrange(shots_goals, desc(shotVolume))
shots_goals$shortName <- shots_goals$shortName %>% as.factor()
#Converts the data into a readable format for ggplot
shots_goals_long <- gather(shots_goals, key = var, value = value, shotVolume, goals)
#Creates the plot structure
shots_goals_plot <- ggplot(shots_goals_long, aes(x=reorder(shortName, -value), y = value, fill = var)) +
geom_col(position = "identity", width = 0.9) +
labs(title="Shots And Goals By Player",
x="Players",
y="Volume") +
scale_x_discrete(guide = guide_axis(angle = 60))
#Adds a legend
shots_goals_plot <- shots_goals_plot + guides(fill=guide_legend(title="Key"))
#Plot
shots_goals_plot
# Split into test and train subsets
train.size <- 0.8 * nrow(top_shots)
train <- sample(1:nrow(top_shots), train.size)
test <- -train
shots.train <- top_shots[train, ]
shots.test <- top_shots[test, ]
is_goal.test <-  top_shots$is_goal[test]
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
bhmod2_X_new
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bhmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
bhmod2_X_new
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bhmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
#Defines list for stan
bhmod2_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
pred = 5,
X = bhmod2_X,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = bhmod2_X_new,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
dist_beta_mu_mu = 19,
dist_beta_mu_sigma = 10,
dist_beta_sigma_rate = 0.5,
angle_beta_mu_mu = 30,
angle_beta_mu_sigma = 10,
angle_beta_sigma_rate = 0.5
)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
#Defines list for stan
bhmod2_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
pred = 5,
X = bhmod2_X,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = bhmod2_X_new,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
dist_beta_mu_mu = 19,
dist_beta_mu_sigma = 10,
dist_beta_sigma_rate = 0.5,
angle_beta_mu_mu = 30,
angle_beta_mu_sigma = 10,
angle_beta_sigma_rate = 0.5
)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
#Defines list for stan
bhmod1_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
X = shots.train$dist,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = shots.test$dist,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
beta_mu_mu = 19,
beta_mu_sigma = 10,
beta_sigma_rate = 0.5
)
#Runs stan
bhmod1 <- stan(file = "../Stan Files/dist+shortName.stan", data = bhmod1_list, chains = 4, init = 0, seed = 1)
print(bhmod1, pars="beta")
#Extracts generated quantities
ext_fit_4 <- extract(bhmod1)
#Constructs a data-frame
salah_pp <- data.frame(Population = ext_fit_4$pp_y_new, MohamedSalah = ext_fit_4$salah_y_new)
#Makes the data-frame readable to ggplot
salah_pp <- reshape2::melt(salah_pp)
#Constructs the plot
salah_pp_plot <- ggplot(salah_pp, aes(x=value, fill=variable)) +
geom_density(alpha=.25) +
labs(title="xG Plot Of The Population And Mohamed Salah",
x="xG",
y="Likelihood")
#Adds Legend
salah_pp_plot <- salah_pp_plot + guides(fill=guide_legend(title="Key"))
#Plots
salah_pp_plot
launch_shinystan(bmod3)
#First create design matrices
bhmod2_X <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.train)
bhmod2_X_new <- model.matrix(is_goal ~ dist + body_part + angles, data = shots.test)
#Defines list for stan
bhmod2_list <- list(y = as.numeric(as.character(shots.train$is_goal)),
n = dim(shots.train)[1],
pred = 5,
X = bhmod2_X,
#Defines Grouping
players = length(unique(shots.train$bayes_id)),
player = shots.train$bayes_id,
#Predictive Inputs
n_new = dim(shots.test)[1],
X_new = bhmod2_X_new,
#Hyper-Prior Parameters
alpha_mu_mu = 10,
alpha_mu_sigma = 10,
alpha_sigma_rate = 0.5,
dist_beta_mu_mu = 19,
dist_beta_mu_sigma = 10,
dist_beta_sigma_rate = 0.5,
angle_beta_mu_mu = 30,
angle_beta_mu_sigma = 10,
angle_beta_sigma_rate = 0.5
)
bhmod2 <- stan(file = "../Stan Files/dist+body+angle+shortName.stan", data = bhmod2_list, chains = 1, init = 0, seed = 1)
