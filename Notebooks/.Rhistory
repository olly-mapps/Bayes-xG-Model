plot(cars)
events = read.csv('../Data/events.csv',header=TRUE)
events = read.csv('../Data/events.csv',header=TRUE)
summary(events)
shots <- events[events$event_type == 1, ]
summary(shots)
shots
# Extract observations of shots from the events data
shots_df <- events[events$event_type == 1, ]
# View head of data
shots_df
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
library(dplyr)
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
shots
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
shots.train
#Fit model based on all variables
lm.fit <-  lm(is_goal ~ . , data = shots.train)
#Make predictions using model
lm.pred <-  predict(lm.fit, shots.test)
#Report error
library(dplyr)
library(MASS)
#Fit LDA
lda.fit <-  lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
mean(lda.pred$class != is_goal.test)
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
is_goal.test <-  is_goal[test]
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
is_goal.test <-  shots$is_goal[test]
#Fit LDA
lda.fit <-  lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
mean(lda.pred$class != is_goal.test)
#Convert target to factor
shots$is_goal <- as.factor(shots$is_goal)
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
is_goal.test <-  shots$is_goal[test]
#Fit LDA
lda.fit <- lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
mean(lda.pred$class != is_goal.test)
#Fit LDA
lda.fit <- lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
#lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
#mean(lda.pred$class != is_goal.test)
#Fit LDA
lda.fit <- lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
#lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
#mean(lda.pred$class != is_goal.test)
lda.fit
#Convert variables to factor
shots <- shots %>% mutate_if(is.integer,as.factor)
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
is_goal.test <-  shots$is_goal[test]
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
# Extract observations of shots from the events data
shots_df <- events[events$event_type == 1, ]
# View head of data
shots_df
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
# Extract observations of shots from the events data
shots_df <- events[events$event_type == 1, ]
# View head of data
shots_df
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
#Read in data
events = read.csv('../Data/events.csv',header=TRUE)
#Obtain summary data
summary(events)
# Extract observations of shots from the events data
shots_df <- events[events$event_type == 1, ]
# View head of data
shots_df
#Keep only relevant data
shots <- select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
#Keep only relevant data
shots <- dplyr::select(shots_df, c('shot_place','shot_outcome',
'is_goal','location','bodypart',
'assist_method','situation','fast_break'))
#Convert variables to factor
shots <- shots %>% mutate_if(is.integer,as.factor)
shots
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
is_goal.test <-  shots$is_goal[test]
#Fit LDA
lda.fit <- lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
#lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
#mean(lda.pred$class != is_goal.test)
lda.fit
#Fit LDA
lda.fit <- lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
mean(lda.pred$class != is_goal.test)
#Fit LDA
lda.fit <- lda(is_goal ~ ., data = shots.train)
#Make predictions based on model
lda.pred <-  predict(lda.fit, shots.test)
#Calculate mis-classification
#mean(lda.pred$class != is_goal.test)
lda.pred
#Fit LDA
glm.fit <- glm(is_goal ~ ., family = "binomial", data = shots.train)
#Make predictions based on model
glm.pred <-  predict(glm.fit, shots.test)
#Calculate mis-classification
mean(glm.pred$class != is_goal.test)
#Fit LDA
glm.fit <- glm(is_goal ~ ., family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, Auto.test, type = "response")
#Fit LDA
glm.fit <- glm(is_goal ~ ., family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
#Fit LDA
glm.fit <- glm(is_goal ~ ., family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Keep only relevant data
shots <- dplyr::select(shots_df, c('is_goal','location','bodypart',
'assist_method','situation','fast_break'))
#Convert variables to factor
shots <- shots %>% mutate_if(is.integer,as.factor)
shots
# Split into test and train subsets
train.size <- nrow(shots) / 2
train <- sample(1:nrow(shots), train.size)
test <- -train
shots.train <- shots[train, ]
shots.test <- shots[test, ]
is_goal.test <-  shots$is_goal[test]
#Fit LDA
glm.fit <- glm(is_goal ~ ., family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
library(dplyr)
library(MASS)
library(rstanarm)
bmod = stan_glm(is_goal~.,data=shots)
bmod = stan_glm(is_goal~.,data=shots.train)
bmod = stan_glm(is_goal~.,data=shots.train, family = binomial(link = "logit"))
library(tidyverse)
library(dplyr)
library(MASS)
library(rstanarm)
library(ggplot2)
library(data.table)
#Read in data
actions <- fread('../Data/actions.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# View head of data
shots_df
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
shots <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y','result_id','bodypart_id', 'bodypart_name'))
diff <- data.frame(GOAL_X - shots$start_x)
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
shots <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y','result_id','bodypart_id', 'bodypart_name'))
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
GOAL_Y - shots$start_y, GOAL_Y - shots$end_y)
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
shots <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y','result_id','bodypart_id', 'bodypart_name'))
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
GOAL_Y - shots$start_y, GOAL_Y - shots$end_y)
diff
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
shots <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y','result_id','bodypart_id', 'bodypart_name'))
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
diff
# Keep only necessary features
shots <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y','result_id','bodypart_id', 'bodypart_name'))
shots
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
dist <- data.frame(sqrt(diff[0]**2 + diff[1]**2), sqrt(diff[2]**2 + diff[3]**2))
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
#dist <- data.frame(sqrt(diff[0]**2 + diff[1]**2), sqrt(diff[2]**2 + diff[3]**2))
diff[0]
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
#dist <- data.frame(sqrt(diff[0]**2 + diff[1]**2), sqrt(diff[2]**2 + diff[3]**2))
diff[1]
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
#dist <- data.frame(sqrt(diff[0]**2 + diff[1]**2), sqrt(diff[2]**2 + diff[3]**2))
diff[2]
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2), sqrt(diff[3]**2 + diff[4]**2))
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x, GOAL_X - shots$end_x,
abs(GOAL_Y - shots$start_y), abs(GOAL_Y - shots$end_y))
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2), sqrt(diff[3]**2 + diff[4]**2))
dist
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x,
abs(GOAL_Y - shots$start_y))
#dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2), sqrt(diff[3]**2 + diff[4]**2))
dist
#Define position of goal
GOAL_X = 105
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(GOAL_X - shots$start_x,
abs(GOAL_Y - shots$start_y))
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
dist
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(abs(GOAL_X - shots$start_x),
abs(GOAL_Y - shots$start_y))
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
dist
# Keep only necessary features
shots <- dplyr::select(shots_df, c('result_id','bodypart_id', 'bodypart_name'))
coords <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y'))
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
# Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
dist
shots <- data.frame(shots, dist)
shots <- data.frame(shots, dist)
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
angles <- data.frame(diff[1] / diff[2])
dist
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
angles <- data.frame(diff[1] / diff[2])
dist
angles
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
angles <- ifelse(diff[2] != 0,
diff[1] / diff[2], 0)
dist
angles
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
angles <- data.frame(ifelse(diff[2] != 0,
diff[1] / diff[2], 0))
dist
angles
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
diff[1]
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
diff[2]
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
diff[3]
