bmod2 = stan_glmer(is_goal ~ distance + angles ,data=shots.train, family = binomial)
bmod2 = stan_glmer(result_id ~ distance + angles ,data=shots.train, family = binomial)
bmod2 = stan_glm(result_id ~ distance + angles ,data=shots.train, family = binomial)
bmod2.pred <-  posterior_predict(bmod2, shots.test, type = "response")
mean(bmod2.pred != is_goal.test)
bmod3 <- stan_glm(result_id ~ distance * angles ,data=shots.train, family = binomial)
bmod3 <- stan_glm(result_id ~ distance * angles ,data=shots.train, family = binomial)
bmod3.pred <-  posterior_predict(bmod3, shots.test, type = "response")
mean(bmod3.pred != is_goal.test)
bhmod <- stan_glmer(result_id ~ distance + angles + (1 | bodypart_id),
data=shots.train, family = binomial)
bhmod <- stan_glmer(result_id ~ distance + (1 | bodypart_id),
data=shots.train, family = binomial)
hist(shot_sub$distance)
hist(shots_sub$distance)
library(tidyverse)
library(dplyr)
library(MASS)
library(rstanarm)
library(ggplot2)
library(data.table)
#Read in data
actions <- fread('../Data/actions.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Keep only necessary features
shots <- dplyr::select(shots_df, c('result_id','bodypart_id', 'bodypart_name'))
coords <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y'))
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
shots
#Convert necessary variables to factor
shots$result_id <- shots$result_id %>% as.factor()
shots$bodypart_id <- shots$bodypart_id %>% as.factor()
summary(shots)
#Split Dataframe into success and fail shots
shots_success <- subset(shots, shots$result_id == 1)
shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
shots_success <- shots_success %>% sample_n(1000)
shots_fail <- shots_fail %>% sample_n(1000)
#Bind them back together
shots_sub <- rbind(shots_success, shots_fail)
# Split into test and train subsets
train.size <- nrow(shots_sub) / 2
train <- sample(1:nrow(shots_sub), train.size)
test <- -train
shots.train <- shots_sub[train, ]
shots.test <- shots_sub[test, ]
is_goal.test <-  shots_sub$result_id[test]
boxplot(distance ~ result_id, data=shots_sub,xlab='Success or Failure')
boxplot(angles ~ result_id, data=shots_sub,xlab='Success or Failure')
plot(shots_sub$angles, shots_sub$distance)
hist(shots_sub$distance)
boxplot(distance ~ result_id, data=shots_sub,xlab='Failure or Success')
boxplot(distance ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Distance to goal')
boxplot(angles ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Distance to goal')
boxplot(angles ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Angle to goal')
hist(shots_sub$angles)
hist(shots_sub$log(distance))
hist(log(shots_sub$distance))
hist(log(shots_sub$angles))
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
# Split into test and train subsets
train.size <- nrow(shots_sub) / 2
train <- sample(1:nrow(shots_sub), train.size)
test <- -train
shots.train <- shots_sub[train, ]
shots.test <- shots_sub[test, ]
is_goal.test <-  shots_sub$result_id[test]
boxplot(distance ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Distance to goal')
boxplot(angles ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Angle to goal')
plot(shots_sub$angles, shots_sub$distance)
hist(log(shots_sub$distance))
hist(shots_sub$distance)
hist(shots_sub$angles)
#Fit Logistic Regression
glm.fit <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Fit Logistic Regression
glm.fit <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Fit Logistic Regression
glm.fit <- glm(result_id ~ distance + angles, family = "binomial", data = shots.train)
#Calculate log distances and angles
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
#Removes infinite values
shots_sub$angles[is.infinite(shots_sub$angles)] <- 0
library(tidyverse)
library(dplyr)
library(MASS)
library(rstanarm)
library(ggplot2)
library(data.table)
#Read in data
actions <- fread('../Data/actions.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Keep only necessary features
shots <- dplyr::select(shots_df, c('result_id','bodypart_id', 'bodypart_name'))
coords <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y'))
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
shots
#Convert necessary variables to factor
shots$result_id <- shots$result_id %>% as.factor()
shots$bodypart_id <- shots$bodypart_id %>% as.factor()
summary(shots)
#Split Dataframe into success and fail shots
shots_success <- subset(shots, shots$result_id == 1)
shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
shots_success <- shots_success %>% sample_n(1000)
shots_fail <- shots_fail %>% sample_n(1000)
#Bind them back together
shots_sub <- rbind(shots_success, shots_fail)
dim(shots_sub)
summary(shots_sub)
#Calculate log distances and angles
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
#Removes infinite values
shots_sub <- shots_sub[is.finite(df), ]
#Calculate log distances and angles
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
#Removes infinite values
shots_sub <- shots_sub[is.finite(shots_sub), ]
#Calculate log distances and angles
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
#Removes infinite values
shots_sub <- shots_sub[is.finite(unlist(shots_sub)), ]
library(tidyverse)
library(dplyr)
library(MASS)
library(rstanarm)
library(ggplot2)
library(data.table)
#Read in data
actions <- fread('../Data/actions.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Keep only necessary features
shots <- dplyr::select(shots_df, c('result_id','bodypart_id', 'bodypart_name'))
coords <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y'))
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
shots
#Convert necessary variables to factor
shots$result_id <- shots$result_id %>% as.factor()
shots$bodypart_id <- shots$bodypart_id %>% as.factor()
summary(shots)
#Split Dataframe into success and fail shots
shots_success <- subset(shots, shots$result_id == 1)
shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
shots_success <- shots_success %>% sample_n(1000)
shots_fail <- shots_fail %>% sample_n(1000)
#Bind them back together
shots_sub <- rbind(shots_success, shots_fail)
dim(shots_sub)
summary(shots_sub)
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#To remove 0 values
angles <- subset(angles, angles != 0)
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#To remove 0 values
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
#To remove rows with zero values in them
shots <- subset(shots, shots$angles != 0)
#Convert necessary variables to factor
shots$result_id <- shots$result_id %>% as.factor()
shots$bodypart_id <- shots$bodypart_id %>% as.factor()
summary(shots)
#Split Dataframe into success and fail shots
shots_success <- subset(shots, shots$result_id == 1)
shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
shots_success <- shots_success %>% sample_n(1000)
shots_fail <- shots_fail %>% sample_n(1000)
#Bind them back together
shots_sub <- rbind(shots_success, shots_fail)
dim(shots_sub)
library(tidyverse)
library(dplyr)
library(MASS)
library(rstanarm)
library(ggplot2)
library(data.table)
#Read in data
actions <- fread('../Data/actions.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Keep only necessary features
shots <- dplyr::select(shots_df, c('result_id','bodypart_id', 'bodypart_name'))
coords <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y'))
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
#To remove rows with zero values in them
shots <- subset(shots, shots$angles != 0)
#Convert necessary variables to factor
shots$result_id <- shots$result_id %>% as.factor()
shots$bodypart_id <- shots$bodypart_id %>% as.factor()
summary(shots)
#Split Dataframe into success and fail shots
shots_success <- subset(shots, shots$result_id == 1)
shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
shots_success <- shots_success %>% sample_n(1000)
shots_fail <- shots_fail %>% sample_n(1000)
#Bind them back together
shots_sub <- rbind(shots_success, shots_fail)
dim(shots_sub)
summary(shots_sub)
#Calculate log distances and angles
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
# Split into test and train subsets
train.size <- nrow(shots_sub) / 2
train <- sample(1:nrow(shots_sub), train.size)
test <- -train
shots.train <- shots_sub[train, ]
shots.test <- shots_sub[test, ]
is_goal.test <-  shots_sub$result_id[test]
boxplot(distance ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Distance to goal')
boxplot(angles ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Angle to goal')
plot(shots_sub$angles, shots_sub$distance)
hist(shots_sub$distance)
hist(shots_sub$angles)
#Fit Logistic Regression
glm.fit <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Fit Logistic Regression
glm.fit <- glm(result_id ~ distance + angles, family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Fit Logistic Regression
glm.fit <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm.probs <-  predict(glm.fit, shots.test, type = "response")
glm.pred <-  rep(0, length(glm.probs))
glm.pred[glm.probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Fit Logistic Regression
glm_1 <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_1_probs <-  predict(glm_1, shots.test, type = "response")
glm_1_pred <-  rep(0, length(glm_1_probs))
glm_1_pred[glm_1_probs > 0.5] <- 1
mean(glm.pred != is_goal.test)
#Fit Logistic Regression
glm_1 <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_1_probs <-  predict(glm_1, shots.test, type = "response")
glm_1_pred <-  rep(0, length(glm_1_probs))
glm_1_pred[glm_1_probs > 0.5] <- 1
mean(glm_1_pred != is_goal.test)
#Fit Logistic Regression
glm_2 <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_2_probs <-  predict(glm_2, shots.test, type = "response")
glm_2_pred <-  rep(0, length(glm_2_probs))
glm_2_pred[glm_2_probs > 0.5] <- 1
mean(glm_2_pred != is_goal.test)
#Fit Logistic Regression
glm_2 <- glm(result_id ~ distance + angles, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_2_probs <-  predict(glm_2, shots.test, type = "response")
glm_2_pred <-  rep(0, length(glm_2_probs))
glm_2_pred[glm_2_probs > 0.5] <- 1
mean(glm_2_pred != is_goal.test)
#Fit Logistic Regression
glm_3 <- glm(result_id ~ distance + angles + bodypart_id, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_3_probs <-  predict(glm_3, shots.test, type = "response")
glm_3_pred <-  rep(0, length(glm_3_probs))
glm_3_pred[glm_3_probs > 0.5] <- 1
mean(glm_3_pred != is_goal.test)
#Split Dataframe into success and fail shots
shots_success <- subset(shots, shots$result_id == 1)
shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
shots_success <- shots_success %>% sample_n(10000)
library(tidyverse)
library(dplyr)
library(MASS)
library(rstanarm)
library(ggplot2)
library(data.table)
#Read in data
actions <- fread('../Data/actions.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Keep only necessary features
shots <- dplyr::select(shots_df, c('result_id','bodypart_id', 'bodypart_name'))
coords <- dplyr::select(shots_df, c('start_x','start_y','end_x',
'end_y'))
shots
#Define position of goal
GOAL_X = 0
GOAL_Y = 68 / 2
#Define differences for for calculations
diff <- data.frame(abs(GOAL_X - coords$start_x),
abs(GOAL_Y - coords$start_y))
# Calculate distances
dist <- data.frame(sqrt(diff[1]**2 + diff[2]**2))
names(dist)[1] <- "distance"
#Calculate angles
angles <- data.frame(diff[1]/diff[2])
#To remove inf values.
angles <- unlist(angles)
angles[is.infinite(angles)] <- 0
angles <- data.frame(angles)
#Concatenate dataframes
shots <- data.frame(shots, dist, angles)
#To remove rows with zero values in them
shots <- subset(shots, shots$angles != 0)
#Convert necessary variables to factor
shots$result_id <- shots$result_id %>% as.factor()
shots$bodypart_id <- shots$bodypart_id %>% as.factor()
summary(shots)
#Split Dataframe into success and fail shots
#shots_success <- subset(shots, shots$result_id == 1)
#shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
#shots_success <- shots_success %>% sample_n(10000)
#shots_fail <- shots_fail %>% sample_n(10000)
#Bind them back together
#shots_sub <- rbind(shots_success, shots_fail)
dim(shots_sub)
#Split Dataframe into success and fail shots
#shots_success <- subset(shots, shots$result_id == 1)
#shots_fail <- subset(shots, shots$result_id == 0)
#Sample from each subset
#shots_success <- shots_success %>% sample_n(10000)
#shots_fail <- shots_fail %>% sample_n(10000)
#Bind them back together
#shots_sub <- rbind(shots_success, shots_fail)
shots_sub <- shots
dim(shots_sub)
summary(shots_sub)
#Calculate log distances and angles
shots_sub$distance <- log(shots_sub$distance)
shots_sub$angles <- log(shots_sub$angles)
# Split into test and train subsets
train.size <- nrow(shots_sub) / 2
train <- sample(1:nrow(shots_sub), train.size)
test <- -train
shots.train <- shots_sub[train, ]
shots.test <- shots_sub[test, ]
is_goal.test <-  shots_sub$result_id[test]
boxplot(distance ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Distance to goal')
boxplot(angles ~ result_id, data=shots_sub,xlab='Failure or Success', ylab = 'Angle to goal')
plot(shots_sub$angles, shots_sub$distance)
hist(shots_sub$distance)
hist(shots_sub$angles)
#Fit Logistic Regression
glm_1 <- glm(result_id ~ distance, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_1_probs <-  predict(glm_1, shots.test, type = "response")
glm_1_pred <-  rep(0, length(glm_1_probs))
glm_1_pred[glm_1_probs > 0.5] <- 1
mean(glm_1_pred != is_goal.test)
#Fit Logistic Regression
glm_2 <- glm(result_id ~ distance + angles, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_2_probs <-  predict(glm_2, shots.test, type = "response")
glm_2_pred <-  rep(0, length(glm_2_probs))
glm_2_pred[glm_2_probs > 0.5] <- 1
mean(glm_2_pred != is_goal.test)
#Fit Logistic Regression
glm_3 <- glm(result_id ~ distance + angles + bodypart_id, family = "binomial", data = shots.train)
#Calculate mis-classification
glm_3_probs <-  predict(glm_3, shots.test, type = "response")
glm_3_pred <-  rep(0, length(glm_3_probs))
glm_3_pred[glm_3_probs > 0.5] <- 1
mean(glm_3_pred != is_goal.test)
#Read in data
actions <- fread('../Data/events_England.csv', header=TRUE)
#Obtain summary data
summary(actions)
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "shot")
# Extract observations of shots from the actions data
shots_df <- actions %>% dplyr::filter(type_name == "eventId")
